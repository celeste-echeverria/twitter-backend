// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username       String  @unique // Unique constraint
  name           String? @db.VarChar(35) // Limit display name to 35 characters
  email          String  @unique // Unique constraint
  password       String
  profilePicture String?
  privacy        Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime? // Optional value

  posts     Post[]
  following  Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")

  reactions Reaction[]

  messagesSent Message[] @relation(name: "sender")

  chats Chat[]
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid() // Foreign Key
  followedId String @db.Uuid() // Foreign Key

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followerId, followedId]) // Unique constraint on the combination of followerId and followedId
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many

  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[] 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  parentId String? @db.Uuid
  parent   Post?   @relation(name: "RepliesTo", fields: [parentId], references: [id])
  
  comments         Post[]  @relation(name: "RepliesTo")
  reactions         Reaction[]
  
  qtyTotalReactions Int   @default(0)
  qtyLikes          Int   @default(0)
  qtyRetweets       Int   @default(0)
  qtyComments       Int   @default(0)
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key
  type String 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional 

  userId         String @db.Uuid // Foreign Key
  postId         String @db.Uuid // Foreign Key

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade) // Many to one
  post         Post         @relation(fields: [postId], references: [id], onDelete: Cascade) // Many to one

  @@unique([userId, postId, type])
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key
  createdAt DateTime @default(now())
  content String

  senderId String   @db.Uuid // Foreign Key
  sender User @relation(name: "sender", fields: [senderId], references: [id])

  chatId    String   @db.Uuid()
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users     User[]  
  messages Message[]
}